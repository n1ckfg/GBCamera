<jittershader name="VHS-C">
    <description>
        Analog video effect.
    </description>

    <param name="tex0" type="int" default="0"/>
    <param name="gamma" type="float" default="1.2"/>
    <param name="posterizeLevels" type="float" default="16.0"/>
    <param name="texelSize" type="vec2" default="8 11"/>

    <language name="glsl" version="1.0">
        <bind param="tex0" program="fp"/>
        <bind param="float" program="fp"/>
        <bind param="posterizeLevels" program="fp"/>
        <bind param="texelSize" program="fp"/>

        <program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl"/>
        <program name="fp" type="fragment">
<![CDATA[ 

varying vec2 texcoord0; 
uniform sampler2DRect tex0; 
uniform float gamma;// = 1.2;
uniform float posterizeLevels;// = 90;
uniform vec2 texelSize;// = vec2(1.0/120.0, 1.0/90.0);

const float kernel[5] = float[](0.10, 0.20, 0.40, 0.20, 0.10);

float getLuminance(vec3 col) {
    return dot(col, vec3(0.299, 0.587, 0.114));
}

float map(float s, float a1, float a2, float b1, float b2) {
    return b1 + (s - a1) * (b2 - b1) / (a2 - a1);
}

vec3 adjustGamma(vec3 color, float gamma) {
    return pow(color, vec3(1.0 / gamma)); 
}

// entry point
void main() {
    vec2 uv = texcoord0.xy;
    
    vec3 centerColor = texture2DRect(tex0, uv).xyz;     
    vec3 leftColor = texture2DRect(tex0, uv - vec2(texelSize.x, 0.0)).xyz;
    vec3 rightColor = texture2DRect(tex0, uv + vec2(texelSize.x, 0.0)).xyz;
    vec3 topColor = texture2DRect(tex0, uv + vec2(0.0, texelSize.y)).xyz;
    vec3 bottomColor = texture2DRect(tex0, uv - vec2(0.0, texelSize.y)).xyz;

    vec3 blurredColor = topColor * kernel[0] + leftColor * kernel[1] + centerColor * kernel[2] + rightColor * kernel[3] + bottomColor * kernel[4];
    vec3 sharpenedColor = blurredColor * 5.0 - (leftColor + rightColor + topColor + bottomColor);
    vec3 posterizedColor = floor(sharpenedColor * posterizeLevels) / posterizeLevels;

    gl_FragColor = vec4(posterizedColor, 1.0);
}

]]>
        </program>
    </language>
</jittershader>